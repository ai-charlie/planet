ARG CUDA_VERSION=11.4.2
ARG CUDNN_VERSION=8
ARG OS_VERSION=20.04

# 从nvidia 官方镜像库拉取基础镜像
FROM nvcr.io/nvidia/pytorch:21.10-py3
LABEL maintainer="zhanglq"

ENV TRT_VERSION 8.0.3.4
SHELL ["/bin/bash", "-c"]

# Setup user account
ARG uid=1000
ARG gid=1000
RUN groupadd -r -f -g ${gid} trtuser && useradd -o -r -l -u ${uid} -g ${gid} -ms /bin/bash trtuser
RUN usermod -aG sudo trtuser
RUN echo 'trtuser:nvidia' | chpasswd
RUN chown trtuser /workspace

# Repair the GPG signing key rotation for CUDA repositories
# https://github.com/NVIDIA/cuda-repo-management/issues/4
# RUN rm /etc/apt/sources.list.d/cuda.list
# RUN rm /etc/apt/sources.list.d/nvidia-ml.list
RUN apt-key del 7fa2af80
RUN apt-get update && apt-get install -y --no-install-recommends wget
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
RUN dpkg -i cuda-keyring_1.0-1_all.deb


# # 将 apt 的升级源切换成 阿里云
# RUN  sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list && \
#             apt-get clean && \
#             rm /etc/apt/sources.list.d/*

# 安装必要的库
# RUN apt-get update && apt-get install -y software-properties-common
# RUN add-apt-repository ppa:ubuntu-toolchain-r/test
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     libcurl4-openssl-dev \
#     wget \
#     vim \
#     zlib1g-dev \
#     git \
#     pkg-config \
#     sudo \
#     ssh \
#     libssl-dev \
#     pbzip2 \
#     pv \
#     bzip2 \
#     unzip \
#     devscripts \
#     lintian \
#     fakeroot \
#     dh-make \
#     build-essential \
#     libgl1-mesa-glx


RUN apt-get update && apt-get install -y --no-install-recommends \
    git-lfs \
    libeigen3-dev \
    sudo

# # 安装 python3 环境
# RUN apt-get install -y --no-install-recommends \
#     python3 \
#     python3-pip \
#     python3-dev \
#     python3-wheel &&\
#     cd /usr/local/bin &&\
#     ln -s /usr/bin/python3 python &&\
#     ln -s /usr/bin/pip3 pip;

# # 安装 TensorRT
# RUN cd /tmp && sudo apt-get update

# RUN version="8.2.5-1+cuda11.4" && \
#     sudo apt-get install libnvinfer8=${version} libnvonnxparsers8=${version} libnvparsers8=${version} libnvinfer-plugin8=${version} libnvinfer-dev=${version} libnvonnxparsers-dev=${version} libnvparsers-dev=${version} libnvinfer-plugin-dev=${version} python3-libnvinfer=${version} &&\
#     sudo apt-mark hold libnvinfer8 libnvonnxparsers8 libnvparsers8 libnvinfer-plugin8 libnvinfer-dev libnvonnxparsers-dev libnvparsers-dev libnvinfer-plugin-dev python3-libnvinfer


# Install PyPI packages
# RUN pip3 install --upgrade pip
RUN pip3 config set global.index-url https://pypi.douban.com/simple/
# RUN pip3 install setuptools>=41.0.0
# # Install packages in requirements.txt
# COPY requirements.txt /tmp/requirements.txt
# RUN pip3 install -r /tmp/requirements.txt
# RUN pip3 install jupyter jupyterlab
# # Workaround to remove numpy installed with tensorflow
# RUN pip3 install --upgrade numpy
# # install packages for jupyter
# RUN pip3 install ipykernel
# RUN pip3 install ipywidgets --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host=files.pythonhosted.org
# RUN jupyter nbextension enable --py widgetsnbextension

# 升级 Cmake（可选）
# RUN cd /tmp && \
#     wget https://github.com/Kitware/CMake/releases/download/v3.14.4/cmake-3.14.4-Linux-x86_64.sh && \
#     chmod +x cmake-3.14.4-Linux-x86_64.sh && \
#     ./cmake-3.14.4-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir --skip-license && \
#     rm ./cmake-3.14.4-Linux-x86_64.sh

# 安装Opencv
RUN apt-get install build-essential libgtk2.0-dev pkg-config \
    libavcodec-dev libavformat-dev libswscale-dev -y && \
    git clone https://github.com/opencv/opencv.git && \
    cd opencv && mkdir build && cd build && \
    cmake -D CMAKE_BUILD_TYPE=Release -D BUILD_SHARED_LIBS=NO .. && \
    cat /proc/cpuinfo | grep "processor" | wc -l | xargs make -j && \
    make install && cd ../.. && \
    rm -rf opencv

RUN pip3 install --upgrade pip
RUN pip3 install opencv-python

# # 设置环境变量和工作路径
# ENV TRT_LIBPATH /usr/lib/x86_64-linux-gnu
# ENV TRT_OSSPATH /workspace/TensorRT
# ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${TRT_OSSPATH}/build/out:${TRT_LIBPATH}"
# WORKDIR /workspace

# 设置语言环境为中文，防止 print 中文报错
ENV LANG C.UTF-8

USER trtuser
RUN ["/bin/bash"]